How did viewing a diff between two versions of a file help you see the bug that was introduced?

Useful for checking for typos and bugs in code, 
comparing and checking what has been changed between versions

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

Have an easy to reference history alows for to undo changes done, understand the history of a program, allow to break from a certain development paths

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google docs does?

For each logical change is a good rule of thumb, in code each change should be centered around function, where as an essay document changes evolve more organically and  happen in fast small changes not needing testing etc.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

they are designed to meet users needs, coding has multiple files they effect each other so changes across all three are needed to be committed.

How can you use the commands git log and git diff to view the history of files?

git log brings up a history (log) of changes while git diff compares the changes bewteen each commit

How might using version control make you more confident to make changes that could break something?

Will be able to revert changes and experiemtn more easily with the ability/confidence to skip between versions

Now that you have your workspace set up, what do you want to try using Git for?

doing other courses in Udacity and trying to help peps on github